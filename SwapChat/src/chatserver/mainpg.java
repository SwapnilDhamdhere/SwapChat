/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatserver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author admin
 */
public class mainpg extends javax.swing.JFrame {

    final int SERVER_PORT = 18524;//Which port the server listening to
    Server myServer;
    
    /**
     * Creates new form mainpg
     */
    public mainpg() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 500));
        setMinimumSize(new java.awt.Dimension(600, 500));

        jLabel1.setFont(new java.awt.Font("MV Boli", 0, 36)); // NOI18N
        jLabel1.setText("ChatServer");

        jButton1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jButton1.setText("on");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jButton2.setText("off");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(75, 75, 75)
                                .addComponent(jButton2)))
                        .addGap(0, 397, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        serveron();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        serveroff();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainpg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainpg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainpg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainpg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new mainpg().setVisible(true);
            }
        });
    }
    
    private void serveron(){
        //server on code
        myServer = new Server();
        new Thread(myServer).start();
    }
    
    private void serveroff(){
        //server off code
        if(myServer != null){
            myServer.stopServer();
        }
    }
    
    public class Server implements Runnable{
        
        //the ref to all the clients as threads
        private final ArrayList<ClientThread> connectedClients;
        
        //all the clients connect to this server socket
        private ServerSocket serverSocket;
        
        //initializing the list of the clients.
        public Server(){
            connectedClients = new ArrayList<>();
        }
        
        //for stoping the server
        public void stopServer(){
            jTextArea1.append("closed server socket. \n");
            sendMessageAllClient("<Server disconnected>");
            closeAllClients();
            connectedClients.clear();
            try{
                serverSocket.close();
            }catch(IOException ex){
                Logger.getLogger(mainpg.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        private void closeAllClients(){
            synchronized(connectedClients){
                for(ClientThread current : connectedClients){
                    current.closeConnection();
                }
            }
        }
        
        public boolean isLegalName(String name) {
            synchronized (connectedClients) {
                if (name.equals("all")) {
                    return false;
                }
                for (ClientThread current : connectedClients) {
                    if (current.info.name.equals(name)) {
                        return false;
                    }
                }
                return true;
            }
        }
        
        public void sendMessageAllClient(String msg){
            synchronized(connectedClients){
                for(ClientThread current : connectedClients){
                    current.out.println(msg);
                }
            }
        }
        
        public synchronized boolean sendPrivateMsg(String senderName, String recipientName, String msg) {
            if (senderName.equals(recipientName)) {
                return false;
            }
            ClientThread recipient = getClientThread(recipientName);
            if (recipient == null) {
                return false;
            }
            recipient.out.println("<Private message from: " + senderName + "> " + msg);
            return true;
        }
            
        private ClientThread getClientThread(String clientsName){
            synchronized(connectedClients){
                for(ClientThread current : connectedClients){
                    if(current.info.name.equals(clientsName)){
                        return current;
                    }
                }
                return null;
            }
        }
        
        @Override
        public void run(){
            try{
                serverSocket = new ServerSocket(SERVER_PORT);
                jTextArea1.append("Chat server is start and running and listening on port" + SERVER_PORT + ".\n");
                while(true){
                    Socket clientSocket =serverSocket.accept();
                    if(true){//////change
                        ClientThread clientThread = new ClientThread(clientSocket);
                        clientThread.start();
                    }else{
                        return;
                    }
                }
            } catch(IOException e){
                if(jButton1.isSelected()){
                    jTextArea1.setText("Error has been occured while starting the server. \n\tError: " +e.toString()+ "\n");
                }
            }
        }
        
        public boolean isLegalName(String name, ArrayList<ClientThread> connectedClients){
            synchronized(connectedClients){
                if(name.equals("all")){
                    return false;
                }
                for(ClientThread current : connectedClients){
                    if(current.info.name.equals(name)){
                        return false;
                    }
                }
                return true;
            }
        }
        
        public class ClientThread extends Thread{
            public Socket curClient;
            public PrintWriter out;
            public BufferedReader in;
            ClientInfoSeirialized info;
            
            public ClientThread(Socket curClient){
                this.curClient = curClient;
                info=new ClientInfoSeirialized();
            }
            
            public ClientThread(Socket curClient, String name) {
                this.curClient = curClient;
                info = new ClientInfoSeirialized();
                info.name = name;
            }
            
            @Override
            public void run(){
                try{
                    out = new PrintWriter(curClient.getOutputStream(), true);
                    in = new BufferedReader(new InputStreamReader(curClient.getInputStream()));
                    
                    String name=in.readLine();
                    if(isLegalName(name)){
                        jTextArea1.append("Client " +name+ "connected. \n");
                        sendMessageAllClient("<Client " +name+ "has entered>");
                        out.println("Welcome, " +name);
                        
                        connectedClients.add(this);
                        
                        info.name =name;
                        
                        
                        String serializedFromClient;
                        while ((serializedFromClient = in.readLine()) != null) {
                            try {
                                System.out.println(serializedFromClient);
                                info = (ClientInfoSeirialized) SerializeDeserialize.fromString(serializedFromClient);
                                //who's online was clicked
                                if (info.showOnline) {
                                    out.println(getConnectedClients());
                                } 
                                //The user is sending a message to all the clients
                                else if (info.recipient.equals("all")) {
                                    sendMessageAllClient(info.name + ": " + info.msg);
                                } //The user wants to send a private message
                                else {
                                    //Failed sending the private message
                                    if (sendPrivateMsg(info.name, info.recipient, info.msg)) {
                                        out.println("<Couldn't send your message to " + info.recipient + ">");
                                    } else { //Succeded sending the private message
                                        out.println("<Sent: " + info.msg + " Only to: " + info.recipient + ">");
                                    }
                                }
                            } catch (ClassNotFoundException e) {
                                System.out.println("Error in deserialization" + e.toString());
                            }
                        }
                        jTextArea1.append("Client " + info.name + " disconnected\n");
                        sendMessageAllClient("<Client " + info.name + " disconnected>");
                    } else {
                        out.println("<Connection rejected because your name is 'all' or your name is already taken>");
                    }
                        
                    }
                catch (IOException e) {
                    if(jButton2.isSelected()){
                        jTextArea1.append("Lost connection with " + info.name + ".\n\tError: + " + e.toString() + "\n");
                        sendMessageAllClient("<Client " + info.name + " has been disconnected>");
                    }
                } finally {
                    synchronized (connectedClients) {
                        connectedClients.remove(this);
                    }
                    closeConnection();
                }
                
                }
                private String getConnectedClients() {
                synchronized (connectedClients) {
                    String allConnected = "";
                    allConnected = "<Now online:";
                    for (ClientThread current : connectedClients) {
                        allConnected += current.info.name + ", ";
                    }
                    return allConnected.substring(0, allConnected.length() - 2) + ">";
                }
                }
                
                public void closeConnection() {
                try {
                    if (out != null) {
                        out.close();
                    }
                    if (in != null) {
                        in.close();
                    }
                    if (curClient != null) {
                        curClient.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(mainpg.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
            }
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
